import streamlit as st
import requests
from mistralai import Mistral
import os
import json
import pandas as pd
from io import BytesIO
import base64

# Configuration de la cl√© API
# Utilisez st.secrets pour une gestion s√©curis√©e des cl√©s
API_KEY = st.secrets["API_KEY"]

# Initialiser le client Mistral
client = Mistral(api_key=API_KEY)

# --- Fonctions existantes pour l'OCR ---

# Fonction pour uploader le fichier PDF directement via l'API Mistral
def upload_pdf_to_mistral(file):
    """Uploads a file to Mistral AI for processing."""
    try:
        # Use file.getvalue() to get bytes content for upload
        file_content = file.getvalue()
        uploaded_pdf = client.files.upload(
            file={
                "file_name": file.name,
                "content": file_content,
            },
            purpose="ocr"
        )
        st.success(f"Fichier '{file.name}' upload√© avec succ√®s (ID: {uploaded_pdf.id}).")
        return uploaded_pdf.id
    except Exception as e:
        st.error(f"Erreur lors de l'upload du fichier: {e}")
        return None

# Fonction pour obtenir une URL sign√©e pour le fichier upload√©
def get_signed_url(file_id):
    """Gets a signed URL for an uploaded file ID."""
    try:
        signed_url = client.files.get_signed_url(file_id=file_id)
        st.success("URL sign√©e r√©cup√©r√©e.")
        return signed_url.url
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration de l'URL sign√©e: {e}")
        return None

# Fonction pour appeler l'API OCR avec l'URL sign√©e
def call_ocr_api(signed_url, model="mistral-ocr-latest"):
    """Calls the Mistral OCR API to process the document via URL."""
    try:
        with st.spinner("Traitement OCR en cours..."):
            ocr_response = client.ocr.process(
                model=model,
                document={
                    "type": "document_url",
                    "document_url": signed_url,
                },
                include_image_base64=False # Set to True if you need images, but generally not for text extraction
            )
        st.success("OCR termin√©.")
        return ocr_response
    except Exception as e:
        st.error(f"Erreur lors de l'appel de l'API OCR: {e}")
        return None

# --- Nouvelle fonction pour l'extraction IA ---

def extract_info_with_llm(ocr_text):
    """Uses a Mistral LLM to extract structured information from OCR text."""
    # Define the desired JSON structure
    json_schema = {
      "report_info": {
        "lab_name": "string",
        "report_id": "string",
        "issue_date": "string", # e.g., "DD/MM/YYYY" or "YYYY-MM-DD"
        "validation_date": "string" # e.g., "DD/MM/YYYY" or "YYYY-MM-DD"
      },
      "client_info": {
        "client_name": "string"
      },
      "sample_info": {
        "product_name": "string",
        "lot_number": "string",
        "sample_id": "string", # Internal lab sample ID
        "date_received": "string", # e.g., "DD/MM/YYYY" or "YYYY-MM-DD"
        "date_analyzed": "string", # e.g., "DD/MM/YYYY" or "YYYY-MM-DD"
        "date_collected": "string"  # Optional, e.g., "DD/MM/YYYY" or "YYYY-MM-DD"
      },
      "analysis_results": [ # This should be an array of objects, one for each row in the results table
        {
          "parameter": "string", # e.g., "Humidit√©", "Mati√®re grasse libre", "Prot√©ines", "Sucres solubles", "HPD", etc.
          "result": "string", # The measured value, can be number or text like "<0.1"
          "unit": "string", # e.g., "g/100g", "%", "mg/100g"
          "specification": "string", # The specification or regulatory limit (e.g., "<=82", "<35", "Conforme")
          "uncertainty": "string", # The uncertainty value
          "method": "string" # The analytical method used (e.g., "Mi105", "NF V 04-403")
        }
        # ... more analysis results objects
      ],
      "conclusion": "string" # The overall conclusion (e.g., "Conforme")
    }

    # Craft a detailed prompt for the LLM
    prompt = f"""
    You are an expert in analyzing laboratory food analysis reports (bulletins d'analyse).
    I will provide you with the full text extracted from such a report.
    Your task is to extract the key information and structure it into a JSON object based on the following schema.
    Pay close attention to the tables containing analysis results. Extract each row from these tables into the 'analysis_results' array.

    Ensure the JSON output is strictly valid and only contains the JSON object within a markdown code block.

    JSON Schema:
    {json.dumps(json_schema, indent=2)}

    If a specific piece of information (like date_collected, method, or certain report/client fields) is not present or cannot be reliably identified in the text, set the corresponding value to `null`.
    For the 'analysis_results', if a column value (like unit, specification, uncertainty, or method for a specific parameter) is not present in that row, set it to `null` for that result object.
    Extract numerical results and uncertainties as strings, preserving the original format (e.g., "59.9", "1.2", "<0.1").

    Here is the text from the analysis report:

    ---TEXT_START---
    {ocr_text}
    ---TEXT_END---

    Please provide the extracted information as a single JSON object inside a markdown code block like this:
    ```json
    {{...}}
    ```
    """

    try:
        with st.spinner("Analyse IA des r√©sultats en cours..."):
            # Use a capable generative model like mistral-large-latest or mistral-medium
            chat_response = client.chat(
                model="mistral-large-latest", # Or "mistral-medium", "mistral-small"
                messages=[
                    {"role": "user", "content": prompt}
                ],
                response_format={"type": "json_object"} # Request JSON output directly
            )
        st.success("Analyse IA termin√©e.")

        # Attempt to parse the JSON response
        # Mistral's response_format="json_object" should return a JSON directly
        # Sometimes it might still wrap it, so we'll try both direct parsing and finding the markdown block
        response_content = chat_response.choices[0].message.content.strip()

        try:
            # Try direct parsing first
            extracted_data = json.loads(response_content)
            return extracted_data
        except json.JSONDecodeError:
            # If direct parsing fails, try to find the JSON block in markdown
            st.warning("Le mod√®le n'a pas retourn√© de JSON direct. Recherche du bloc de code markdown.")
            json_string = None
            if response_content.startswith("```json"):
                json_string = response_content[len("```json"):].strip()
                if json_string.endswith("```"):
                    json_string = json_string[:-len("```")].strip()
            elif "```json" in response_content:
                 # Look for the first ```json block
                 start = response_content.find("```json") + len("```json")
                 end = response_content.find("```", start)
                 if start != -1 and end != -1:
                     json_string = response_content[start:end].strip()

            if json_string:
                try:
                    extracted_data = json.loads(json_string)
                    return extracted_data
                except json.JSONDecodeError:
                    st.error("L'IA a g√©n√©r√© une r√©ponse qui ne contient pas de JSON valide m√™me dans un bloc de code.")
                    st.text(response_content) # Show user what the AI returned
                    return None
            else:
                 st.error("L'IA a g√©n√©r√© une r√©ponse inattendue qui ne contient pas de JSON valide.")
                 st.text(response_content) # Show user what the AI returned
                 return None


    except Exception as e:
        st.error(f"Erreur lors de l'appel de l'API IA pour l'extraction: {e}")
        return None

# --- Helper function for Excel download ---

def to_excel(df):
    """Saves a DataFrame to an Excel file in memory."""
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df.to_excel(writer, index=False, sheet_name='Analysis Results')
    writer.close() # Use close() instead of save() for newer pandas/xlsxwriter
    processed_data = output.getvalue()
    return processed_data

# --- Streamlit Interface ---

st.title("üß™ Extracteur d'Informations de Bulletins d'Analyses (IA)")
st.markdown("""
Upload un fichier PDF de bulletin d'analyse pour:
1.  Extraire le texte via OCR.
2.  Utiliser une IA (Mistral Large) pour identifier et structurer les informations cl√©s (d√©tails du rapport, du produit, et surtout les r√©sultats d'analyse).
3.  Afficher les r√©sultats structur√©s sous forme de tableau.
4.  Permettre le t√©l√©chargement des r√©sultats d'analyse au format Excel.
""")

uploaded_file = st.file_uploader("üì• Choisissez un fichier PDF de bulletin d'analyse", type=["pdf"])

extracted_data = None # Variable pour stocker les donn√©es extraites par l'IA

if uploaded_file:
    st.write(f"Fichier s√©lectionn√©: **{uploaded_file.name}**")

    # Step 1: Upload and OCR
    st.subheader("√âtape 1: OCR du Document")
    file_id = upload_pdf_to_mistral(uploaded_file)

    if file_id:
        signed_url = get_signed_url(file_id)

        if signed_url:
            ocr_result = call_ocr_api(signed_url)

            if ocr_result:
                try:
                    # Extract the markdown text from all pages
                    pages_text = [page.markdown for page in ocr_result.pages]
                    full_text = "\n\n==NEW_PAGE==\n\n".join(pages_text) # Add separator for clarity to LLM

                    # Optional: Display the raw OCR text for debugging/verification
                    # with st.expander("Voir le texte OCR brut"):
                    #    st.text(full_text)

                    # Step 2: AI Extraction
                    st.subheader("√âtape 2: Extraction des Informations par IA")
                    extracted_data = extract_info_with_llm(full_text)

                    if extracted_data:
                        st.subheader("√âtape 3: Informations Extraites")

                        # Display top-level info
                        st.markdown("#### D√©tails du Rapport et de l'√âchantillon")
                        report_info_df = pd.DataFrame({
                            "Champ": ["Laboratoire", "ID Rapport", "Date d'√©mission", "Date de Validation", "Client", "Produit", "Lot", "ID √âchantillon", "Date r√©ception", "Date analyse", "Date collecte", "Conclusion"],
                            "Valeur": [
                                extracted_data.get('report_info', {}).get('lab_name'),
                                extracted_data.get('report_info', {}).get('report_id'),
                                extracted_data.get('report_info', {}).get('issue_date'),
                                extracted_data.get('report_info', {}).get('validation_date'),
                                extracted_data.get('client_info', {}).get('client_name'),
                                extracted_data.get('sample_info', {}).get('product_name'),
                                extracted_data.get('sample_info', {}).get('lot_number'),
                                extracted_data.get('sample_info', {}).get('sample_id'),
                                extracted_data.get('sample_info', {}).get('date_received'),
                                extracted_data.get('sample_info', {}).get('date_analyzed'),
                                extracted_data.get('sample_info', {}).get('date_collected'),
                                extracted_data.get('conclusion')
                            ]
                        })
                        st.table(report_info_df.set_index("Champ"))


                        # Display analysis results in a DataFrame
                        st.markdown("#### R√©sultats d'Analyse D√©taill√©s")
                        analysis_results = extracted_data.get('analysis_results')

                        if analysis_results:
                            results_df = pd.DataFrame(analysis_results)
                            # Reorder columns for better readability if needed
                            display_cols = ['parameter', 'result', 'unit', 'specification', 'uncertainty', 'method']
                            results_df = results_df[display_cols].fillna('') # Fill NaN for better display

                            st.dataframe(results_df, use_container_width=True)

                            # Step 4: Download as Excel
                            st.subheader("√âtape 4: T√©l√©charger les R√©sultats")
                            excel_data = to_excel(results_df)
                            st.download_button(
                                label="T√©l√©charger les r√©sultats en Excel",
                                data=excel_data,
                                file_name=f"resultats_analyse_{uploaded_file.name.replace('.pdf', '')}.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                        else:
                            st.warning("Aucun r√©sultat d'analyse n'a pu √™tre extrait par l'IA.")

                    else:
                        st.error("√âchec de l'extraction des informations par l'IA.")

                except AttributeError:
                    st.error("Erreur : Impossible d'acc√©der √† l'attribut 'pages' dans la r√©ponse OCR.")
                except Exception as e:
                    st.error(f"Une erreur inattendue s'est produite lors du traitement des donn√©es extraites : {e}")

else:
    st.info("Veuillez uploader un fichier PDF pour commencer l'analyse.")

st.markdown("---")
st.markdown("D√©velopp√© avec Mistral AI üß†")
